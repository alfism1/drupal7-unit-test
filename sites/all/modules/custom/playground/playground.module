<?php

require_once __DIR__ . '/vendor/autoload.php';

use PhpAmqpLib\Connection\AMQPStreamConnection;
use PhpAmqpLib\Message\AMQPMessage;

/**
 * Implements hook_menu().
 */
function playground_menu()
{
  $items = array();
  $items['api/upload_mp3'] = array(
    'page callback' => 'upload_mp3',
    'access callback' => true,
  );

  return $items;
}

/**
 * Implements hook_node_submit().
 */
function playground_node_submit($node, $form, &$form_state)
{
  // // Decompose the selected menu parent option into 'menu_name' and 'plid', if
  // // the form used the default parent selection widget.
  // if (!empty($form_state['values']['menu']['parent'])) {
  //   list($node->menu['menu_name'], $node->menu['plid']) = explode(':', $form_state['values']['menu']['parent']);
  // }
}

/**
 * Implementats of hook_form_alter().
 */
function playground_form_alter(&$form, &$form_state, $form_id)
{
  if ($form_id == 'article_node_form') {
    $form['actions']['submit']['#submit'][] = 'submit_article';
  }
}

function submit_article(&$form, &$form_state)
{
  $nid = $form_state["nid"];

  // queue process
  $connection = new AMQPStreamConnection('localhost', 5672, 'guest', 'guest');
  $channel = $connection->channel();
  $channel->queue_declare('drupal_test', false, false, false, false);
  $msg = new AMQPMessage($nid);
  $channel->basic_publish($msg, '', 'drupal_test');
  $channel->close();
  $connection->close();
}

// FIXME upload_mp3
function upload_mp3()
{
  require "phpmp3.php";

  $directory = "public://text_to_speech";
  if (file_prepare_directory($directory, 1)) {
    // Add audio process
    // $clean_body = $_POST["body"];

    // main input
    $node = node_load($_POST["nid"]);
    if (!$node) {
      return drupal_json_output([
        "status" => false,
        "message" => "Node id " . $_POST["nid"] . " not found"
      ]);
    }

    // $title = "This is a new brand";
    // $clean_body = "<p>Hahahaha nothing to lose</p><p>Tomorrow will be better</p>";
    $clean_body = $node->body["und"][0]["value"];

    $body = generateBodyArrayV1($clean_body);
    $merge_body = [];
    $skipped_pattern = [
      '/see also:(.*?)/i',
      '/see also :(.*?)/i',
      '/see:(.*?)/i',
      '/see :(.*?)/i',
      '/see more:(.*?)/i',
      '/see more :(.*?)/i',
      '/photo:(.*?)/i',
      '/photo :(.*?)/i',
      '/photos:(.*?)/i',
      '/photos :(.*?)/i',
      '/For more stories(.*?),\s?+<a(.*?)a>)/i',
      '/Read (.*?) story/i'
    ];

    foreach ($body as $key => $value) {
      if ($value["type"] == "text") {

        // // check if paragraph contain <a then check the skipped_pattern
        // if (strpos($value["content"], '<a ') !== false) {

        // variable for detecting skip body or not
        $skipped = 0;

        // loop all skipped pattern
        foreach ($skipped_pattern as $p) {
          // will skip the body which contains skipped pattern
          if (preg_match($p, $value["content"])) {
            $skipped = 1;

            // check if any See also: pattern and the link is on next paragraph
            if (!strpos($value["content"], '<a ') !== false) { // check if paragraph doesn't contain <a then alter next body to empty string
              $body[$key + 1]["content"] = "";
            }

            break;
          }
        }

        // }

        // if skipped = 0, then merge paragraph to merge_body
        if (!$skipped) {
          $merge_body[] = strip_tags($body[$key]["content"]);
        }

        // reset skipped for next iteration
        $skipped = 0;
      }
    }

    $clean_body = implode(" ", $merge_body);

    $words = explode(" ", $clean_body);

    // temporary folder for mp3 file
    $dest = $_SERVER['DOCUMENT_ROOT'] . "/drupal/sites/default/files/tts_tmp/";

    // filename
    $newpath = "tts_" . $node->nid . "_" . rand() . ".mp3";

    $file_duration = 0;

    // check character's count more than 5000 as the google text to speech limitation
    if (strlen($clean_body) >= 5000) {
      $text_split_count = ceil(strlen($clean_body) / 5000) + 2;   // numbers of text splits. +1 just in case the sliced body still have 5k char

      $clean_body_slice = [];
      $clean_body_array = [];
      $from = 0;
      $check = 0;
      for ($i = 0; $i < $text_split_count; $i++) {
        if ($i == $text_split_count - 1) { // last index will get all words left
          $clean_body_slice[$i] = array_slice($words, $from);
        } else {
          $clean_body_slice[$i] = array_slice($words, $from, count($words) / $text_split_count);
        }
        $from += count($clean_body_slice[$i]);
        $clean_body_array[$i] = implode(" ", $clean_body_slice[$i]);

        // convert to mp3 file
        $tts_result = google_text_to_speech(addslashes($clean_body_array[$i]), $node->title);
        if (!$tts_result->error) {  // save to S3 if the text is successfully modified
          $mp3_file = base64_decode($tts_result->audioContent);
          $tmp_name[$i] = "tmp_tts_" . $node->nid . "_" . $i . ".mp3";
          // TODO put contents error
          $put_contents = file_put_contents($dest . $tmp_name[$i], $mp3_file);
          if ($put_contents) {
            $check++; // each time put content is successfull will increment
          }
        }
      }

      // merge audio process
      if ($check == $text_split_count) {
        $mp3 = new PHPMP3($dest . $tmp_name[0]);
        $mp3->striptags();

        $path = [];
        $mp3_loop = [];
        for ($i = 1; $i < count($tmp_name); $i++) {
          $path[$i] = $dest . $tmp_name[$i];
          $mp3_loop[$i] = new PHPMP3($path[$i]);
          $mp3->mergeBehind($mp3_loop[$i]);
          $mp3->striptags();
        }

        $mp3->save($dest . $newpath);

        $mp3->setFileInfoExact();
        $file_duration = round($mp3->time, 2);

        // save merged audio to S3
        // get size of the binary file
        $filesize = filesize($dest . $newpath);
        // open file for reading in binary mode
        $fp = fopen($dest . $newpath, 'rb');
        // read the entire file into a binary string
        $binary = fread($fp, $filesize);
        // finally close the file
        fclose($fp);

        // store mp3 to S3
        $file = file_save_data($binary, $directory . "/" . $newpath);
      }

      // remove tmp files
      for ($i = 0; $i < count($tmp_name); $i++) {
        $path[$i] = $dest . $tmp_name[$i];
        unlink($path[$i]);
      }
      unlink($dest . $newpath);
    }
    // total character below 5000
    else {
      $tts_result = google_text_to_speech(addslashes($clean_body), $node->title);
      if (!$tts_result->error) {  // save to S3 if the text is successfully modified
        $mp3_file = base64_decode($tts_result->audioContent);

        // get file duration
        $tmp_name = "tmp_tts_" . $node->nid . "_" . $i . ".mp3";
        $put_contents = file_put_contents($dest . $tmp_name, $mp3_file);
        $mp3 = new PHPMP3($dest . $tmp_name);
        $mp3->setFileInfoExact();
        $file_duration = round($mp3->time, 2);

        // upload to S3
        $file = file_save_data($mp3_file, $directory . "/" . $newpath);
      }
    }

    // Store to database
    if ($file) {
      $node->field_text_to_speech_mp3["und"][0]["fid"] = $file->fid;
      $node->field_text_to_speech_mp3["und"][0]["display"] = 1;
      $node->field_text_to_speech_mp3["und"][0]["description"] = $file_duration;
      $node->field_text_to_speech_mp3["und"][0]["upload_button"] = "Upload";
      $node->field_text_to_speech_mp3["und"][0]["remove_button"] = "Remove";
      $node->field_text_to_speech_mp3["und"][0]["upload"] = "";
      node_save($node);

      return drupal_json_output([
        "status" => true,
        "message" => "Success"
      ]);
    }

    return drupal_json_output([
      "status" => false,
      "message" => "Failed"
    ]);
  }
}


/**
 * Split the body string to an array based on the content type (text, image, table, etc)
 * @param  string $body
 * @return array
 */
// generateBodyArrayV1
function generateBodyArrayV1($body)
{
  $bodyParts = [];
  $p_rex = '/(<p(.*?)>([\w\W]+?)<\/p>)/i';
  $img_rex = '/<img.*?src="(.*?)"/i';
  $img_style_rex = '/<img.*?style="(.*?)"/i';
  $em_rex = '/(<em>([\w\W]+?)<\/em>)/i';
  $tr_rex = '/(<tr(.*?)>([\w\W]+?)<\/tr>)/i';
  $th_rex = '/(<th(.*?)>([\w\W]+?)<\/th>)/i';
  $td_rex = '/(<td(.*?)>([\w\W]+?)<\/td>)/i';
  $a_rex = '/(<a(.*?)>([\w\W]+?)<\/a>)/i';
  $discadedParagraphs = [];

  // clean the body
  $body = str_replace("<div", "<p", str_replace("</div>", "</p>", $body));
  $body = preg_replace('/<p (.*?)>/', '<p>', $body);
  $body = str_replace("<p dir=\"ltr\">", "<p>", $body);
  $body = str_replace(["<em>", "</em>", "<br />"], "", $body);
  // $body = str_replace("<em>", "", $body);
  // $body = str_replace("</em>", "", $body);
  // $body = str_replace("<br />", "", $body);
  // $body = str_replace("<ul>", "", $body);
  // $body = str_replace("</ul>", "", $body);
  $body = str_replace("&nbsp;", " ", $body);
  $body = str_replace("<p></p>", "", $body);
  $body = preg_replace('/<ol(.*?)>/i', "<ol>", $body);
  $body = str_replace("</ol>", "</ol>", $body);

  // remove \r\t
  $body = str_replace(["\t", "\r"], "", $body);
  // replace div with p
  // $body = str_replace("<div>", "<p>", str_replace("</div>", "</p>", $body));

  // remove p tags inside table
  if (strpos($body, "<table") !== false) {
    $body = explode("<table", $body);
    foreach ($body as $k => $part) {
      if (strpos($part, "<tr") !== false || strpos($part, "<td") !== false) {
        $part = explode("</table>", $part);
        $part[0] = str_replace("</p>", "", preg_replace('/<p(.*?)>/i', "", $part[0]));
        $part[0] = str_replace("</ul>", "</tabletdul>", preg_replace('/<p(.*?)>/i', "<tabletdul>", $part[0]));
        $part[0] = str_replace("</ol>", "</tabletdol>", preg_replace('/<p(.*?)>/i', "<tabletdol>", $part[0]));
        $part = implode("</table>", $part);
        $body[$k] = $part;
      }
    }
    $body = implode("<table", $body);
  }
  // remove div parent tag of table
  $body = str_replace("<div><table", "<table", str_replace("</table></div>", "</table>", $body));
  // wrap table into p tag
  $body = str_replace("<table", "<p><table", str_replace("</table>", "</table></p>", $body));
  // wrap <!-- --> into p tag
  $body = str_replace("<!--", "<p><!--", str_replace("-->", "--></p>", $body));
  // wrap h1, h2, h3, h4, h5, h6, pre, address into p tag
  $body = str_replace("<h1", "<p><h1", str_replace("</h1>", "</h1></p>", $body));
  $body = str_replace("<h2", "<p><h2", str_replace("</h2>", "</h2></p>", $body));
  $body = str_replace("<h3", "<p><h3", str_replace("</h3>", "</h3></p>", $body));
  $body = str_replace("<h4", "<p><h4", str_replace("</h4>", "</h4></p>", $body));
  $body = str_replace("<h5", "<p><h5", str_replace("</h5>", "</h5></p>", $body));
  $body = str_replace("<h6", "<p><h6", str_replace("</h6>", "</h6></p>", $body));
  $body = str_replace("<pre", "<p><pre", str_replace("</pre>", "</pre></p>", $body));
  $body = str_replace("<address", "<p><address", str_replace("</address>", "</address></p>", $body));
  $body = str_replace("<ol", "<p><ol", str_replace("</ol>", "</ol></p>", $body));
  $body = str_replace("<ul", "<p><ul", str_replace("</ul>", "</ul></p>", $body));
  $body = str_replace("<li><p>", "<li>", str_replace("</p></li>", "</li>", $body));
  $body = str_replace(" &nbsp;", "&nbsp;", $body);
  $body = str_replace("&nbsp;</li>", "</li>", $body);

  $body = preg_replace('/(<a(.*?)https:\/\/www.theedgesingapore.com\/(.*?))(\?(.*?))"/', '$1" ', $body);

  $body = preg_replace('/ dir=\"(.*?)\"/', "", $body);
  $expression = '/<li>(.*?)<p>(.*?)<\/p>(.*?)<\/li>/s';
  preg_match_all($expression, $body, $r);
  if (count($r[0]) > 0) {
    $body = preg_replace($expression, "<li>$1$2$3</li>", $body);
  }
  // $body = preg_replace('/(<li>(.*?))<\/p>/', "$1", $body);
  $body = str_replace("\n</li>", "</li>", $body);

  // $body = preg_replace('/((See|see):(.*?)<a (.*?)<\/a>)/', "<hr/>$1<hr/>", $body);
  // $body = preg_replace('/((See|see):(.*?)<a (.*?)<\/a>)/', "<hr/>$1<hr/>", $body);
  // $body = preg_replace('/(<a (.*?)><strong>(.*?)<\/strong><\/a>)/', "<hr/>$1<hr/>", $body);


  $body = preg_replace('/<span(.*?)>/', "<span>", $body);

  // handle blockquote
  preg_match_all('/<blockquote>(.*?)<\/blockquote>/s', $body, $blockquote);
  foreach ($blockquote[0] as $key => $value) {
    $blockquote_replacement = str_replace('<p>', '<div>', $value);
    $blockquote_replacement = str_replace('</p>', '</div>', $blockquote_replacement);
    $body = str_replace($value, "<p>$blockquote_replacement</p>", $body);
  }


  // get paragraphs
  preg_match_all($p_rex, $body, $regs);
  $row = 0;
  $range = 4;
  $ads_no = 1;

  foreach ($regs[1] as $i => $part) {
    if (in_array($i, $discadedParagraphs)) {
      continue;
    }
    // $part = str_replace(["<p>", '<p class="rtejustify">'], "", str_replace("</p>", "", $part));
    if (strrpos($part, "<p>") > -1) {
      $part = str_replace("<p>", "", str_replace("</p>", "", $part));
    }
    $part = str_replace('<h6 class="rtejustify">', "<h6>", $part);
    $part = str_replace('<h5 class="rtejustify">', "<h5>", $part);
    $part = str_replace('<h4 class="rtejustify">', "<h4>", $part);
    $part = str_replace('<h3 class="rtejustify">', "<h3>", $part);
    $part = str_replace('<h2 class="rtejustify">', "<h2>", $part);
    $part = str_replace('<h1 class="rtejustify">', "<h1>", $part);
    $part = preg_replace('/<h(\d)(.*?)>/', "<h$1>", $part);
    $part = preg_replace('/^\<span\>(.*?)\<\/span\>/', "$1", $part);
    $part = preg_replace('/^\<span\>(.*?)\<\/span\>/', "$1", $part);  // handle <span><span>blablabla</span></span>

    if (preg_match("/<h[1-7](.*?)><img (.*?) \/><h\/[1-7]>/", $part)) {
      if (strpos($part, "<h6><img ") === 0) {
        $part = str_replace("<h6><img ", "<img ", str_replace("/></h6>", "/>", $part));
      }
      if (strpos($part, "<h5><img ") === 0) {
        $part = str_replace("<h5><img ", "<img ", str_replace("/></h5>", "/>", $part));
      }
      if (strpos($part, "<h4><img ") === 0) {
        $part = str_replace("<h4><img ", "<img ", str_replace("/></h4>", "/>", $part));
      }
      if (strpos($part, "<h3><img ") === 0) {
        $part = str_replace("<h3><img ", "<img ", str_replace("/></h3>", "/>", $part));
      }
      if (strpos($part, "<h2><img ") === 0) {
        $part = str_replace("<h2><img ", "<img ", str_replace("/></h2>", "/>", $part));
      }
      if (strpos($part, "<h1><img ") === 0) {
        $part = str_replace("<h1><img ", "<img ", str_replace("/></h1>", "/>", $part));
      }
    }

    // change \n to br tag
    $part = str_replace("\n", "<br>", trim($part));
    // remove br tag at the first paragraph
    // $part = preg_replace('/^(<br>)+/i', "", trim($part));
    $part = preg_replace('/^(<br\s*\/?>)*|(<br\s*\/?>)*$/i', "", trim($part));
    // remove unused br inside ul/li tag
    $part = str_replace("<ul><br><li>", "<ul><li>", $part);
    $part = str_replace("</li><br></ul>", "</li></ul>", $part);
    $part = str_replace("<ol><br><li>", "<ol><li>", $part);
    $part = str_replace("</li><br></ol>", "</li></ul>", $part);

    $part = str_replace("</li><br><li>", "</li><li>", $part);
    $part = str_replace("<li><br>", "<li>", $part);
    $part = str_replace("<ol><br>", "<ol>", $part);
    // $part = str_replace("</li>", "<br/></li>", $part);

    $part = trimWordV1($part, "&nbsp;");

    $part = preg_replace('/((.*?)(See|see|SEE):(.*))/', "<hr/>$1<hr/>", $part);

    $part = preg_replace_callback(
      '/(&[A-z0-9]+;)/i',
      function ($matches) {
        return html_entity_decode($matches[0]);
      },
      $part
    );

    // converting <a href=\"https://sg.tepcdn.com/public/usr/cvcwk9/44818c-map1balestierroad.jpg\" target=\"_blank\"><img alt=\"Map of 1 Balestier Road\" src=\"https://sg.tepcdn.com/public/usr/cvcwk9/44818c-map1balestierroad.jpg\" style=\"height:472px; width:600px\" /></a>
    // to <img alt=\"Map of 1 Balestier Road\" src=\"https://sg.tepcdn.com/public/usr/cvcwk9/44818c-map1balestierroad.jpg\" style=\"height:472px; width:600px\" />
    if (strpos($part, "<a ") === 0 && strpos($part, "<img ") !== false) {
      preg_match($a_rex, $part, $a_regs);
      if (isset($a_regs[3])) {
        $part = $a_regs[3];
      }
    }
    // converting <strong><img alt=\"\" src=\"https://sg.tepcdn.com/public/usr/1js56c/65a49f-BLD-BISHAN-8-02-SIC.jpg\" style=\"height:768px; width:600px\" /></strong>
    // to <img alt=\"\" src=\"https://sg.tepcdn.com/public/usr/1js56c/65a49f-BLD-BISHAN-8-02-SIC.jpg\" style=\"height:768px; width:600px\" />
    if (strpos($part, "<strong><img ") === 0) {
      $part = str_replace(["<strong>", "</strong>"], "", $part);
    }
    // converting <em><img alt=\"\" src=\"https://sg.tepcdn.com/public/usr/1js56c/65a49f-BLD-BISHAN-8-02-SIC.jpg\" style=\"height:768px; width:600px\" /></em>
    // to <img alt=\"\" src=\"https://sg.tepcdn.com/public/usr/1js56c/65a49f-BLD-BISHAN-8-02-SIC.jpg\" style=\"height:768px; width:600px\" />
    if (strpos($part, "<em><img ") === 0) {
      $part = str_replace(["<em>", "</em>"], "", $part);
    }

    // handle <h5><strong><span><img alt="Fairytale Castle Brooch - THE EDGE SINGAPORE" src="https://s3.ap-southeast-1.amazonaws.com/www.theedgesingapore.com/public/usr/7jsfwl/86424a-Fairytale-Castle-Brooch-Cuff-copy.jpg" style="width: 50%;" /></span></strong></h5>
    $pattern = "/(<[0-9A-z]+(.*?)>)+(<img(.*?)>)(.*?)(<\/[0-9A-z]+>)+$/";
    if (preg_match($pattern, $part)) {
      preg_match($pattern, $part, $matches);
      $part = "<div>" . $matches[3] . str_replace($matches[3], "", $part) . "</div>";  // $matches[3];  // <img .... />
    }


    if (strpos($part, '<img') === 0) {
      //if there is another text after img
      if (strcmp(">", substr($part, -1)) != 0) {
        $part = str_replace("/>", "/>--", $part);
        $split = explode("--", $part);

        // get image
        preg_match($img_rex, $split[0], $img_regs);
        // get image description
        $image_description = "";
        preg_match($em_rex, $split[0], $em_regs);
        if (isset($em_regs[1])) {
          $image_description = str_replace(["\r", "\n", "\t"], "", str_replace("<em>", "", str_replace("</em>", "", $em_regs[1])));
        } else if (isset($regs[1][$i + 1])) {
          preg_match($em_rex, $regs[1][$i + 1], $em_regs);
          if (isset($em_regs[1])) {
            $image_description = str_replace(["\r", "\n"], "", str_replace("<em>", "", str_replace("</em>", "", $em_regs[1])));
            $discadedParagraphs[] = $i + 1;
          }
        }

        $bodyParts[] = generateImageTypeArrayV1($split[0], $img_regs[1], $image_description);

        $bodyParts[] = [
          "type" => "text",
          "content" => ($split[1] != "&nbsp;") ? trimWordV1($split[1], "&nbsp;") : $split[1],
          "description" => ""
        ];
      } else {
        // get image
        preg_match($img_rex, $part, $img_regs);
        // get image description
        $image_description = "";
        preg_match($em_rex, $part, $em_regs);
        if (isset($em_regs[1])) {
          $image_description = str_replace(["\r", "\n", "\t"], "", str_replace("<em>", "", str_replace("</em>", "", $em_regs[1])));
        } else if (isset($regs[1][$i + 1])) {
          preg_match($em_rex, $regs[1][$i + 1], $em_regs);
          if (isset($em_regs[1])) {
            $image_description = str_replace(["\r", "\n"], "", str_replace("<em>", "", str_replace("</em>", "", $em_regs[1])));
            $discadedParagraphs[] = $i + 1;
          }
        }
        $bodyParts[] = generateImageTypeArrayV1($part, $img_regs[1], $image_description);
      }
    } else if (strpos($part, '<table') === 0) {
      // remove unused br inside table tag
      $part = str_replace("<br>", "", $part);

      $bodyParts[] = [
        "type" => "table",
        "content" => $part,
        "description" => ""
      ];
    } else if (strpos(strtolower($part), '<!-- embed') === 0 || strpos(strtolower($part), '<!--embed') === 0) {
      /**
       * ====================================================================
       * NOTE:
       * --------------------------------------------------------------------
       * If the embed code has div tags, need to handle it specially. Because,
       * in the above div tags has been replace with p tags.
       * ====================================================================
       */
      $part = str_replace("EMBED", "embed", $part);
      $part = trim(trimWordV1(trimWordV1(trimWordV1($part, "<!-- embed"), "-->"), "<!--embed"), " \n\r");
      $embedType = "";
      if (strpos($part, 'youtube.com') !== "false") {
        $embedType = "youtube";
      }
      if ($embedType) {
        $bodyParts[] = [
          "type" => "embed",
          "content" => ["type" => $embedType, "code" => $part],
          "description" => ""
        ];
      }
    } else {
      $text = ($part != "&nbsp;") ? trimWordV1($part, "&nbsp;") : $part;

      //if there is img tag inside text type
      if (strpos($text, "<img") > 0) {

        $text = str_replace("<img", "--<img", $text);
        //if there is another text after img tag
        if (strcmp(">", substr($text, -1)) != 0) {
          $text = str_replace("/> ", "/>", $text);
          $text = str_replace("/>", "/>--", $text);
        }


        // if there is another text after img tag V2
        // <div><img alt="team at Madly - THE EDGE SINGAPORE" src="https://s3.ap-southeast-1.amazonaws.com/www.theedgesingapore.com/public/usr/7jsfwl/0df423-Team-Photo-Edit-2.jpg" style="width: 100%;" /><h5>The well-trained team at Madly comprises Gemological Institute of America (GIA) graduates, certified pearl experts, jewellery designers and an in-house gem cutter</h5></div>
        if (preg_match("/^<div><img /", $part)) {
          $part = str_replace(["<div>", "</div>"], "", $part);
          $text = preg_replace("/(<img (.*?)\/>)(.*)/", "$1--$3", $part);
        }

        $split = explode("--", $text);

        // special condition -> if first element only contain <h1><span>
        if ($split[0] == "<h1><span>") {
          array_shift($split);
        }

        foreach ($split as $word) {
          if (strpos($word, "<img") === 0) {
            // get image
            preg_match($img_rex, $word, $img_regs);
            // get image description
            $image_description = "";
            preg_match($em_rex, $word, $em_regs);
            if (isset($em_regs[1])) {
              $image_description = str_replace(["\r", "\n", "\t"], "", str_replace("<em>", "", str_replace("</em>", "", $em_regs[1])));
            } else if (isset($regs[1][$i + 1])) {
              preg_match($em_rex, $regs[1][$i + 1], $em_regs);
              if (isset($em_regs[1])) {
                $image_description = str_replace(["\r", "\n"], "", str_replace("<em>", "", str_replace("</em>", "", $em_regs[1])));
                $discadedParagraphs[] = $i + 1;
              }
            }

            $bodyParts[] = generateImageTypeArrayV1($word, $img_regs[1], $image_description);

            // if found any string after <img> -> 
            if (preg_match('/<img(.*?)\/>(.*)/', $word, $w)) {
              $w[2] = preg_replace('/<(.*?)>/', '', $w[2]);
              $w[2] = preg_replace('/<\/(.*?)>/', '', $w[2]);
              $bodyParts[] = [
                "type" => "text",
                "content" => ($w[2] != "&nbsp;") ? trimWordV1($w[2], "&nbsp;") : ($w[2] == "<br>") ? trimWordV1($w[2], "&nbsp;") : $w[2],
                "description" => ""
              ];
            }
          } else {
            //push to array as text type
            $bodyParts[] = [
              "type" => "text",
              "content" => ($word != "&nbsp;") ? trimWordV1($word, "&nbsp;") : ($word == "<br>") ? trimWordV1($word, "&nbsp;") : $word,
              "description" => ""
            ];
          }
        }
      } else {
        $bodyParts[] = [
          "type" => "text",
          "content" => ($part != "&nbsp;") ? trimWordV1($part, "&nbsp;") : $part,
          "description" => ""
        ];
      }
    }

    if ($_GET['ads'] == 1) {
      if ($row == $range) {
        if ($ads_no == 1) {
          $bodyParts[] = [
            "type" => "ad",
            "content" => "/9457649/In_Read_SG_MobileAds",
            "description" => "320x100"
          ];
          $ads_no += 1;
        } else if ($ads_no == 2) {
          $bodyParts[] = [
            "type" => "ad",
            "content" => "/9457649/In_Read_SG2_MobileAds",
            "description" => "320x100"
          ];
          $ads_no += 1;
        } else if ($ads_no == 3) {
          $bodyParts[] = [
            "type" => "ad",
            "content" => "/9457649/In_Read_SG3_MobileAds",
            "description" => "320x100"
          ];
          $ads_no += 1;
        }
        $range += 8;
      }
    }

    $row += 1;
  }

  $bodyPartsNew = [];

  foreach ($bodyParts as $k => $part) {
    // The downtrend shown by line A has been broken. Traders now watch for the oscillation and consolidation support level near 2,830 to provide a base for a rally rebound. Aggressive traders will enter on the first rallies from support. Cautious
    if ($part["content"] != "" && strlen(trim($part["content"])) != 0) {
      $bodyPartsNew[] = $part;
    }
  }
  $bodyParts = $bodyPartsNew;

  return $bodyParts;
}

// generateImageTypeArrayV1
function generateImageTypeArrayV1($part, $image_content, $image_description)
{
  $img_rex = '/<img.*?src="(.*?)"/i';
  $img_style_rex = '/<img.*?style="(.*?)"/i';


  // get image width and height
  $img_width = '';
  $img_height = '';
  preg_match($img_style_rex, $part, $img_style_regs);
  if (isset($img_style_regs[1])) {
    $img_style_regs = explode(';', $img_style_regs[1]);
    foreach ($img_style_regs as $img_style) {
      $img_style = trim($img_style);
      $img_style = explode(':', $img_style);
      if ($img_style[0] == 'width' && isset($img_style[1])) {
        $img_width = $img_style[1];
      } else if ($img_style[0] == 'height' && isset($img_style[1])) {
        $img_height = $img_style[1];
      }
    }

    $img_width = trimWordV1($img_width, "px");
    $img_height = trimWordV1($img_height, "px");
    if (!is_numeric($img_width)) {
      $img_width = '';
    }
    if (!is_numeric($img_height)) {
      $img_height = '';
    }
  }

  $image = strpos($image_content, '%') ? urldecode($image_content) : $image_content;
  $image_explode = explode("/", $image);
  // if contain + and space character
  if (strpos($image_explode[count($image_explode) - 1], "+") && strpos($image_explode[count($image_explode) - 1], " ")) {
    $image_explode[count($image_explode) - 1] = str_replace(" ", "%20", $image_explode[count($image_explode) - 1]);
    $image_explode[count($image_explode) - 1] = str_replace("+", "%2B", $image_explode[count($image_explode) - 1]);
  } else {
    $image_explode[count($image_explode) - 1] = str_replace("+", " ", $image_explode[count($image_explode) - 1]);
    $image_explode[count($image_explode) - 1] = rawurlencode($image_explode[count($image_explode) - 1]);
  }
  $filename = implode("/", $image_explode);

  return [
    "type" => "image",
    "content" => $filename,
    "description" => $image_description,
    "width" => $img_width,
    "height" => $img_height
  ];
}

// trimWordV1
function trimWordV1($text, $word)
{
  return preg_replace('/^(' . $word . ')*|(' . $word . ')*$/', '', $text);
}

// google_text_to_speech
function google_text_to_speech($text, $title = "")
{
  // check Google text to speech
  $curl = curl_init();

  $text = "Title: " . $title . "." . $text;

  curl_setopt_array($curl, array(
    CURLOPT_URL => 'https://texttospeech.googleapis.com/v1beta1/text:synthesize',
    CURLOPT_RETURNTRANSFER => true,
    CURLOPT_ENCODING => '',
    CURLOPT_MAXREDIRS => 10,
    CURLOPT_TIMEOUT => 0,
    CURLOPT_FOLLOWLOCATION => true,
    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
    CURLOPT_CUSTOMREQUEST => 'POST',
    CURLOPT_POSTFIELDS => '{
    "input": {
      "text": "' . $text . '"
    },
    "voice": {
      "languageCode": "en-GB",
      "ssmlGender": "FEMALE",
      "name": "en-GB-Wavenet-F"
    },
    "audioConfig": {
      "audioEncoding": "MP3",
      "pitch": 0,
      "speakingRate": 0.93
    }
  }',
    CURLOPT_HTTPHEADER => array(
      'X-Goog-Api-Key: some-google-api',
      'Content-Type: application/json'
    ),
  ));

  $response = curl_exec($curl);

  curl_close($curl);

  $response = json_decode($response);
  return $response;
}


function playground_total($a, $b)
{
  return $a + $b;
}
